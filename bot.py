import os
import discord
from discord import app_commands
from discord.ext import commands
import json
from myserver import server_on

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ intents
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

DATA_FILE = "data.json"

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# ‡πÄ‡∏ã‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
class ItemView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‡πÄ‡∏û‡∏¥‡πà‡∏°", style=discord.ButtonStyle.green, custom_id="add_item")
    async def add_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AddItemModal()
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="‡∏•‡∏ö", style=discord.ButtonStyle.red, custom_id="delete_item")
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = DeleteItemModal()
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", style=discord.ButtonStyle.blurple, custom_id="update_item")
    async def update_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = UpdateItemModal()
        await interaction.response.send_modal(modal)

# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á
class AddItemModal(discord.ui.Modal, title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"):
    item_name = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô")
    owner_name = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏¥‡∏Å")

    async def on_submit(self, interaction: discord.Interaction):
        data = load_data()
        item = self.item_name.value.strip()
        owner = self.owner_name.value.strip()

        if not item or not owner:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á", ephemeral=True)
            return

        if item in data:
            await interaction.response.send_message(f"‚ùå ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ `{item}` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            return

        data[item] = owner
        save_data(data)
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `{item}` ‚Üí {owner} ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        await update_list_message(interaction)

# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡∏≠‡∏á
class DeleteItemModal(discord.ui.Modal, title="‡∏•‡∏ö‡∏Ç‡∏≠‡∏á"):
    item_name = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô")

    async def on_submit(self, interaction: discord.Interaction):
        data = load_data()
        item = self.item_name.value.strip()

        if item not in data:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ `{item}` ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", ephemeral=True)
            return

        del data[item]
        save_data(data)
        await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö `{item}` ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        await update_list_message(interaction)

# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏≠‡∏á
class UpdateItemModal(discord.ui.Modal, title="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"):
    item_name = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô")
    new_owner = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏¥‡∏ß")

    async def on_submit(self, interaction: discord.Interaction):
        data = load_data()
        item = self.item_name.value.strip()
        owner = self.new_owner.value.strip()

        if item not in data:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ `{item}` ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", ephemeral=True)
            return

        if not owner:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", ephemeral=True)
            return

        data[item] = owner
        save_data(data)
        await interaction.response.send_message(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `{item}` ‚Üí {owner} ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        await update_list_message(interaction)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
async def update_list_message(interaction: discord.Interaction):
    data = load_data()
    message_content = "**üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**\n"
    if not data:
        message_content += "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞"
    else:
        for item, owner in data.items():
            message_content += f"‚Ä¢ `{item}` ‚Üí {owner}\n"

    view = ItemView()
    # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    async for msg in interaction.channel.history(limit=100):
        if msg.author == bot.user and msg.components:
            try:
                await msg.edit(content=message_content, view=view)
                return
            except discord.HTTPException:
                break
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    await interaction.channel.send(content=message_content, view=view)

# ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user}")
    print("üì§ Slash commands synced ‡πÅ‡∏•‡πâ‡∏ß!")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /list
@bot.tree.command(name="list", description="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def list_items(interaction: discord.Interaction):
    data = load_data()
    message = "**üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**\n"
    if not data:
        message += "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞"
    else:
        for item, owner in data.items():
            message += f"‚Ä¢ `{item}` ‚Üí {owner}\n"

    view = ItemView()
    await interaction.response.send_message(message, view=view)

server_on()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó (‡πÉ‡∏™‡πà TOKEN ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á)
bot.run(os.getenv['TOKEN'])


